#!/usr/bin/env node
 
// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  var coffee, js;

  coffee = "#!/usr/bin/env coffee\n\ntry\nRouter = require 'node-simple-router'\ncatch e\nRouter = require '../lib/router'\n\nhttp = require 'http'\n\nrouter = Router(list_dir: true)\n\n###\nExample routes\n###\n\n#router.get \"/\", (req, res) ->\n#  res.end \"Home\"\n\nrouter.get \"/hello\", (req, res) ->\nres.end \"Hello, World!, Hola, Mundo!\"\n\nrouter.get \"/users\", (req, res) ->\nres.writeHead(200, {'Content-type': 'text/html'})\nres.end \"<h1 style='color: navy; text-align: center;'>Active members registry</h1>\"\n\n\nrouter.post \"/users\", (req, res) ->\nrouter.log \"\n\nBody of request is: " + (req.body.toString()) + "\nRequest content type is: " + req.headers['content-type'] + "\"\nrouter.log \"\nRequest Headers\"\nrouter.log \"" + key + " = " + val + "\" for key, val of req.headers\nrouter.log \"\nRequest body object properties\"\nres.write \"\nRequest body object properties\n\"\ntry\nrouter.log \"" + key + ": " + val + "\" for key, val of req.body\ncatch e\nres.write \"Looks like you did something dumb: " + (e.toString()) + "\n\"\nfor key, val of req.body\nres.write \"" + key + " = " + val + "\n\"\nres.end()\n\nrouter.get \"/users/:id\", (req, res) ->\nres.writeHead(200, {'Content-type': 'text/html'})\nres.end \"<h1>User No: <span style='color: red;'>" + req.params.id + "</span></h1>\"\n\n###\nEnd of example routes\n###\n\n#Ok, just start the server!\n\nargv = process.argv.slice 2\n\nserver = http.createServer router\n\nserver.on 'listening', ->\naddr = server.address() or {address: '0.0.0.0', port: argv[0] or 8000}\nrouter.log \"Serving web content at " + addr.address + ":" + addr.port + "\"\n\nprocess.on \"SIGINT\", ->\nserver.close()\nrouter.log \"\n Server shutting up...\n\"\nprocess.exit 0\n\nserver.listen if argv[0]? and not isNaN(parseInt(argv[0])) then parseInt(argv[0]) else 8000\n";

  js = "#!/usr/bin/env node\n\n// Generated by CoffeeScript 1.4.0\n(function() {\nvar Router, argv, http, router, server;\n\ntry {\nRouter = require('node-simple-router');\n} catch (e) {\nRouter = require('../lib/router');\n}\n\nhttp = require('http');\n\nrouter = Router({\nlist_dir: true\n});\n\n/*\nExample routes\n*/\n\n\nrouter.get(\"/hello\", function(req, res) {\nreturn res.end(\"Hello, World!, Hola, Mundo!\");\n});\n\nrouter.get(\"/users\", function(req, res) {\nres.writeHead(200, {\n'Content-type': 'text/html'\n});\nreturn res.end(\"<h1 style='color: navy; text-align: center;'>Active members registry</h1>\");\n});\n\nrouter.post(\"/users\", function(req, res) {\nvar key, val, _ref, _ref1, _ref2;\nrouter.log(\"\n\nBody of request is: \" + (req.body.toString()) + \"\nRequest content type is: \" + req.headers['content-type']);\nrouter.log(\"\nRequest Headers\");\n_ref = req.headers;\nfor (key in _ref) {\nval = _ref[key];\nrouter.log(\"\" + key + \" = \" + val);\n}\nrouter.log(\"\nRequest body object properties\");\nres.write(\"\nRequest body object properties\n\");\ntry {\n_ref1 = req.body;\nfor (key in _ref1) {\nval = _ref1[key];\nrouter.log(\"\" + key + \": \" + val);\n}\n} catch (e) {\nres.write(\"Looks like you did something dumb: \" + (e.toString()) + \"\n\");\n}\n_ref2 = req.body;\nfor (key in _ref2) {\nval = _ref2[key];\nres.write(\"\" + key + \" = \" + val + \"\n\");\n}\nreturn res.end();\n});\n\nrouter.get(\"/users/:id\", function(req, res) {\nres.writeHead(200, {\n'Content-type': 'text/html'\n});\nreturn res.end(\"<h1>User No: <span style='color: red;'>\" + req.params.id + \"</span></h1>\");\n});\n\n/*\nEnd of example routes\n*/\n\n\nargv = process.argv.slice(2);\n\nserver = http.createServer(router);\n\nserver.on('listening', function() {\nvar addr;\naddr = server.address() || {\naddress: '0.0.0.0',\nport: argv[0] || 8000\n};\nreturn router.log(\"Serving web content at \" + addr.address + \":\" + addr.port);\n});\n\nprocess.on(\"SIGINT\", function() {\nserver.close();\nrouter.log(\"\n Server shutting up...\n\");\nreturn process.exit(0);\n});\n\nserver.listen((argv[0] != null) && !isNaN(parseInt(argv[0])) ? parseInt(argv[0]) : 8000);\n\n}).call(this);\n";

}).call(this);
