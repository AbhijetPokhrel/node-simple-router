// Generated by CoffeeScript 1.7.1
(function() {
  var ABORT, AUTHENTICATE, CALL, CANCEL, CHALLENGE, ERROR, EVENT, GOODBYE, HEARTBEAT, HELLO, INTERRUPT, INVOCATION, PUBLISH, PUBLISHED, REGISTER, REGISTERED, RESULT, SUBSCRIBE, SUBSCRIBED, UNREGISTER, UNREGISTERED, UNSUBSCRIBE, UNSUBSCRIBED, WELCOME, WampClient, WampRouter, YIELD, events, genId, isValidURI, randomNum, test, util, ws,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  events = require('events');

  util = require('util');

  ws = require('./ws');

  HELLO = 1;

  WELCOME = 2;

  ABORT = 3;

  CHALLENGE = 4;

  AUTHENTICATE = 5;

  GOODBYE = 6;

  HEARTBEAT = 7;

  ERROR = 8;

  PUBLISH = 16;

  PUBLISHED = 17;

  SUBSCRIBE = 32;

  SUBSCRIBED = 33;

  UNSUBSCRIBE = 34;

  UNSUBSCRIBED = 35;

  EVENT = 36;

  CALL = 48;

  CANCEL = 49;

  RESULT = 50;

  REGISTER = 64;

  REGISTERED = 65;

  UNREGISTER = 66;

  UNREGISTERED = 67;

  INVOCATION = 68;

  INTERRUPT = 69;

  YIELD = 70;

  isValidURI = function(uri_string) {
    return !!uri_string.match(/^(([0-9a-z_]{2,}\.)|\.)*([0-9a-z_]{2,})?$/);
  };

  randomNum = function(len) {
    var n;
    return parseInt(((function() {
      var _i, _results;
      _results = [];
      for (n = _i = 1; 1 <= len ? _i <= len : _i >= len; n = 1 <= len ? ++_i : --_i) {
        _results.push((Math.floor(Math.random() * 10)).toString());
      }
      return _results;
    })()).join(''));
  };

  genId = function() {
    return randomNum(15);
  };

  WampRouter = (function(_super) {
    __extends(WampRouter, _super);

    WampRouter.prototype._wsockHandler = function(wsock) {
      wsock.transport = 'websocket';
      this.connections[this.nextSessionId.toString()] = wsock;
      wsock.on('open', (function(_this) {
        return function(evt) {};
      })(this));
      wsock.on('data', (function(_this) {
        return function(opcode, data) {
          console.log("Server going to process message:", data);
          return _this.processMessage(wsock, wsock.transport, data);
        };
      })(this));
      return wsock.on('close', (function(_this) {
        return function(evt) {
          return delete _this.connections[wsock.id];
        };
      })(this));
    };

    function WampRouter(options) {
      this.sendMessage = __bind(this.sendMessage, this);
      this.processMessage = __bind(this.processMessage, this);
      this.listen = __bind(this.listen, this);
      this._wsockHandler = __bind(this._wsockHandler, this);
      var key, value, _ref;
      this.options = options || {};
      _ref = this.options;
      for (key in _ref) {
        value = _ref[key];
        this[key] = value;
      }
      if (!this.realms) {
        this.realms = {};
      }
      if (!this.roles) {
        this.roles = {
          broker: {},
          dealer: {}
        };
      }
      this.nextSessionId = genId();
      this.connections = {};
      this.webSocketServer = new ws.WebSocketServer(this._wsockHandler);
      this.webSocketServer.on('listening', (function(_this) {
        return function() {
          return _this.emit('listening');
        };
      })(this));
    }

    WampRouter.prototype.listen = function() {
      return ws.WebSocketServer.prototype.listen.apply(this.webSocketServer, Array.prototype.slice.call(arguments));
    };

    WampRouter.prototype.processMessage = function(peer, transport, message) {
      var arr, code, details, realm, session, _ref;
      arr = JSON.parse(message);
      code = arr[0];
      switch (code) {
        case HELLO:
          console.log("Router received HELLO");
          _ref = arr.slice(1), realm = _ref[0], details = _ref[1];
          session = {
            id: this.nextSessionId,
            peer: peer,
            details: details
          };
          if (!(realm in this.realms)) {
            this.realms[realm] = {
              sessions: []
            };
          }
          this.realms[realm].sessions.push(session);
          console.log("@realms[" + realm + "].sessions.length: %d", this.realms[realm].sessions.length);
          this.sendMessage(peer, transport, JSON.stringify([
            WELCOME, this.nextSessionId, {
              roles: this.roles
            }
          ]));
          return this.nextSessionId += 1;
        default:
          return console.log("Unknown code received.");
      }
    };

    WampRouter.prototype.sendMessage = function(peer, transport, message) {
      if (transport === 'websocket') {
        return peer.send(message);
      }
      if (transport === 'unixsocket') {
        return peer.write(new Buffer("" + message + "\r\n", "utf8"));
      }
      if (transport === 'direct') {
        return peer.processMessage(this, 'direct', message);
      }
    };

    return WampRouter;

  })(events.EventEmitter);

  WampClient = (function() {
    function WampClient(options) {
      this.sendMessage = __bind(this.sendMessage, this);
      this.processMessage = __bind(this.processMessage, this);
      this.open = __bind(this.open, this);
      var key, value, _ref;
      this.options = options || {};
      _ref = this.options;
      for (key in _ref) {
        value = _ref[key];
        this[key] = value;
      }
      if ((!this.url) && (!this.router) && (!this.unixsocket)) {
        throw new Error("An URL or a unix socket or a WAMP router instance must be provided for the client to connect");
      }
      if ((this.url && this.router) || (this.url && this.unixsocket) || (this.unixsocket && this.router)) {
        throw new Error("Must provide either URL or unix socket or a WAMP router instance, but not more than one of them");
      }
      if (!this.realm) {
        throw new Error("A realm must be provided for the client to attach to");
      }
      this.transport = this.url ? 'websocket' : this.router ? 'direct' : 'unixsocket';
      if (!this.roles) {
        this.roles = {
          publisher: {},
          subscriber: {},
          caller: {},
          callee: {}
        };
      }
      if (this.transport === 'websocket') {
        this.webSocket = new ws.WebSocketClientConnection(this.url, {
          'Sec-WebSocket-Protocol': 'wamp.2.json'
        });
        this.webSocket.on('data', (function(_this) {
          return function(opcode, data) {
            return _this.processMessage(_this.webSocket, 'websocket', data);
          };
        })(this));
      }
    }

    WampClient.prototype.open = function() {
      var peer;
      peer = this.webSocket || this.router || this.unixsocket;
      return this.sendMessage(peer, this.transport, JSON.stringify([
        HELLO, this.realm, {
          roles: this.roles
        }
      ]));
    };

    WampClient.prototype.processMessage = function(peer, transport, message) {
      var arr, code, details, id, _ref;
      arr = JSON.parse(message);
      code = arr[0];
      switch (code) {
        case WELCOME:
          console.log("Client received Welcome");
          _ref = arr.slice(1), id = _ref[0], details = _ref[1];
          this.session = {
            id: id,
            peer: peer,
            details: details
          };
          return typeof this.onopen === "function" ? this.onopen(this.session) : void 0;
        default:
          return console.log("Unknown code received.");
      }
    };

    WampClient.prototype.sendMessage = function(peer, transport, message) {
      if (transport === 'websocket') {
        return peer.send(message);
      }
      if (transport === 'unixsocket') {
        return peer.write(new Buffer("" + message + "\r\n", "utf8"));
      }
      if (transport === 'direct') {
        return peer.processMessage(this, 'direct', message);
      }
    };

    return WampClient;

  })();

  test = function() {
    var wampRouter;
    wampRouter = new WampRouter;
    console.log("WAMP Router listening on port 8000");
    wampRouter.listen(8000);
    return wampRouter.on('listening', function() {
      var client1, client2;
      client1 = new WampClient({
        router: wampRouter,
        realm: 'test'
      });
      client1.onopen = function(session) {
        return console.log("Direct client opened session.");
      };
      client1.open();
      client2 = new WampClient({
        url: 'ws://0.0.0.0:8000',
        realm: 'test'
      });
      client2.onopen = function(session) {
        return console.log("WebSocket client opened session:");
      };
      return client2.open();
    });
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = {
      WampRouter: WampRouter,
      WampClient: WampClient
    };
  }

  if (!(typeof module !== "undefined" && module !== null ? module.parent : void 0)) {
    test();
  }

}).call(this);
